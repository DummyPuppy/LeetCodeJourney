#identify monotonic array

##key idea:
 - establish the beginning trend
 - check each turn ( i and i+1 ) if they are the same as the begining
 - if they are not, return false
 - check array length too!!
 
 
 class Solution {
    public boolean isMonotonic(int[] nums) {
        int begin = 0;
        int turn = 0;
        if (nums.length <=1){
            return true;
        }
        if (nums[0]>nums[1]){
            begin = 1;
        }
        if (nums[0] < nums[1]){
            begin = -1;
        }
        if (nums[0] == nums[1]){
            begin = 0;
        }
        for (int i = 0; i < nums.length;i++){
            if (i !=0 && i !=nums.length-1){
                if (nums[i] > nums[i+1]){
                    turn = 1;
                    if (begin ==0){
                        begin = turn;
                    }
                    if (turn != begin && begin !=0){
                        return false;
                    }
                }
                if (nums[i] < nums[i+1]){
                    turn = -1;
                    if (begin ==0){
                        begin = turn;
                    }
                    if (turn != begin && begin !=0){
                        return false;
                    }
                }
                if (nums[i] == nums[i+1]){
                    //do nothing;
                }
            }
            }
        return true;
    }
}

#add the sum of all sub-arrays

##key idea:
- sub array !=  sub sequence, sub arrays have the same order in the array
- count the number of sub-array that can start with the int;
- count the number of sub-array that can end with the int;
- multiply start and end, and if it is odd, add 1 and divide by 2, if it is even, just divide by 2;

class Solution {
    
    public int sumOddLengthSubarrays(int[] arr) {
        int result = 0;
        int se =1;
        int len = arr.length;
        int count = 0;
        for (int k = 0; k < len;k++){
            se = (len-k) * (k+1);
            count = se % 2 ==0? se/2: (se+1)/2;
            result += arr[k]*count;
        }
        return result;
    }
}
