#longest substring without repeated characters
##key idea:
-sliding window of a left and a right index

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        left = 0
        right = 1
        maxlen = 1
        if len(s) <=1:
            return len(s)
        while right < len(s):
            if s[right] in s[left:right]:
                left = left+1
            else:
                right = right+1
            if (right-left+1) > maxlen:
                maxlen = right-left
        return maxlen
        
#min stack
-first in last out
class MinStack {
    private Stack<Integer> arr;
    public MinStack() {
        arr = new Stack<>();

    }

    public void push(int val) {
        arr.push(val);
    }

    public void pop() {
        arr.pop();
    }

    public int top() {
       return  arr.get(arr.size()-1);

    }

    public int getMin() {
       return arr.stream().reduce((a,b) -> Math.min(a,b)).get();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
