#create fancy string

##key idea:
-compare three consecutive characters;
-if it is the same as the previous two, skip it;

class Solution {
    public String makeFancyString(String s) {
        if(s.length()<3){
            return s;
        }
        char[] result =s.toCharArray();
        StringBuilder sb = new StringBuilder();
        int k = 2;
        sb.append(result[0]);
        sb.append(result[1]);
        while (k < s.length()){
            if ( result[k] !=result[k-1] || result[k] !=result[k-2]){
                sb.append(result[k]);
            }
            k++;
        }
        
        return sb.toString();
    }
}

#find longest palimdrone
##idea: start from each character, and expand from it
##check both odd length and even length cases

class Solution {
    
    
    public String longestPalindrome(String s) {
        int max = 0;
        int left = 0;
        int right = 0;
        String result = "";
        for (int k =0;k < s.length();k++){
            left = k;
            right = k;
            while ( left >=0 && right < s.length() && s.charAt(left)==s.charAt(right)){
                //odd length
                if (right-left +1 > max){
                    max =right - left +1;
                    result = s.substring(left,right+1);
                }
                left--;
                right ++;
                
            }
            //even length
            right = k+1;
            left = k;
            while (left >=0 && right < s.length() && s.charAt(left)==s.charAt(right)){
                 if (right-left +1 > max){
                    max =right - left +1;
                    result = s.substring(left,right+1);
                }
                left--;
                right ++;
            }
        }
        return result;
    }
}
