#sum diagonal integers

class Solution {
    public int diagonalSum(int[][] mat) {
        int n = mat.length;
        int sum = 0;
        if (n%2 !=0){
            for (int m = 0; m < n;m++){
                if (m != n/2){
                    sum+=mat[m][m];
                    sum+=mat[n-1-m][m];
                }else{
                    sum+=mat[m][m];
                }
            }
        }else{
            for(int k = 0; k < n;k++){
                sum+=mat[k][k];
                sum+=mat[n-1-k][k];
            }
        }
        return sum;
    }
}

#check if it is a x-matrix

class Solution {
    public boolean checkXMatrix(int[][] grid) {
        boolean result = true;
        int n = grid.length;
        for(int k = 0; k < n;k++){
            for (int j = 0; j < n;j++){
                if(j !=k && j !=n-1-k){
                    if (grid[k][j] !=0){
                        return false;
                    }
                }else{
                    if(grid[k][j] ==0){
                        return false;
                    }
                }
            }
        }
        return result;
    }
}

#jump game III
##key idea: 
-dfs method: recursive through left and right jump
-use a boolean[] to check if the point has been reached before
-if it has been jumped to before and still has not reached a value of 0, give up and return false

class Solution {
    public boolean jump(int[] arr, int start, boolean[] lcheck, boolean[] rcheck){
        int end = start + arr[start];
        boolean result = false;
        int n = arr.length;
        
        if (end >=0 && end < n){
            if (!lcheck[end]){
                if (arr[end] ==0){
                    return true;
                }else{
                    lcheck[end] =true;
                    result = jump(arr,end,lcheck,rcheck);
                }
            }else{
                return false;
            }
           
        }
        if (result ==true){
            return true;
        }
        
        int temp  = start- arr[start];
        if (temp >=0 && temp < n){
            if (!rcheck[temp]){
                if (arr[temp] ==0){
                    return true;
            }else{
                rcheck[temp] = true;
                result = jump(arr,temp,lcheck,rcheck);
            }
            }else{
                return false;
            }
         
        } 
        return result;
    }
    public boolean canReach(int[] arr, int start) {
        
        boolean[] lcheck = new boolean[arr.length];
        boolean[] rcheck = new boolean[arr.length];
        return jump(arr,start,lcheck,rcheck);
    }
}

#jump games
##key idea:
-don't mark if the number has been checked. continue on the search
class Solution {
    public boolean jump(int[] nums, int start, boolean[] lchecked,
                       boolean[] rchecked){
        int next = nums[start];
        int last  = nums.length-1;
        int temp  = start;
        boolean result = false;
        //if we can reach the last index within the max length
        if (start+next >=last){
            return true;
        }else{
            //if we cannot reach it 
            //jump sub length
        //for each jump length;
        for (int k = 1; k <=next;k++){
            //go to right
            temp = start+k;
            if(!rchecked[temp]){
                rchecked[temp] = true;
                result = jump(nums,temp,lchecked,rchecked);
            }else{
                continue;
            }
            
            if (result){
                return true;
            }
            //go to right
            if(start-k >=0){
                temp = start-k;
                if (!lchecked[temp]){
                    lchecked[temp] = true;
                    result = jump(nums,temp,lchecked,rchecked);
                }else{
                    continue;
                }
            }
            
        
            
        }}    
        return result;
    }
    public boolean canJump(int[] nums) {
        if (nums.length ==1){
            return true;
        }
        boolean[] lchecked = new boolean[nums.length];
        boolean[] rchecked = new boolean[nums.length];
        return jump(nums,0,lchecked, rchecked);
    }
}

#jump games II
#key idea:
-always try to go to the farthest part 
-when it is the farthest it can reach, get the farthest it can reach at this new position


class Solution {
 
    
    public int jump(int[] nums) {
        int jumps = 0;
        int farthest = 0;
        int current = 0;
        for (int i  =0 ; i < nums.length-1;i++){
            //for each integer
            //find its farthest value;
            farthest = Math.max(farthest, nums[i]+i);
            if (i ==current){
                //if it is the current position that can be reached by going one step further
                current = farthest;
                jumps++;
                
            }
        }
       
        
        return jumps;
    }
}

#jump games VII
#unsolved: time limit exceeded
class Solution {
    public boolean jump(String s, int minj, int maxj,int current){
        int last = s.length()-1;
        boolean result = false;
        if (current+ minj > last){
            return false;
        }
        if (current+ maxj >= last){
            return true;
        }
        for (int k = minj;k <= Math.min(maxj,last-current);k++){
                if (s.charAt(k+current) =='0'){
                    result = jump(s,minj,maxj,current+k);
                    if (result){
                        return result;
                    }
                }
            }
        return result;
    }
    public boolean canReach(String s, int minJump, int maxJump) {
        int current = 0;
        if (s.charAt(s.length()-1) =='1'){
            return false;
        }
        return jump(s,minJump,maxJump,current);
    }
}
